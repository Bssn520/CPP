#include <iostream>

int main()
{
    /**
     * 1. 向流写入数据
     * "std::cout" 中, 前缀 std:: 指出变量名 cout 是定义在名为std的命名空间中的。
     * "::" 被称为作用域运算符
     * 
     * << 输出运算符, 将指定的值写到指定的ostream对象中。
     * 其接收两个运算对象:
     * 左侧的运算对象必须是一个 ostream 对象, 右侧的运算对象是要打印的值。
     * 
     * 输出运算符的计算结果就是其左侧运算对象。
     * 即，计算结果就是我们写入给定值的那个ostream对象。
     * 
     * 下面的例子使用了两次 << ，因此第一个运算符的结果成为了第二个运算符的左侧运算对象，
     * 这样就可以把输出请求连接起来，等价于:
     * std::cout << "Enter 2 numbers:";
     * std::cout << std::endl;
     * 第一个运算符将双引号包括的 字符串字面值常量 打印到标准输出。
     * 第二个运算符打印 endl , 这是一个 操纵符 的特殊值。写入endl的效果是结束当前行，
     * 并将缓存区中的内容刷到设备中。
     * 缓冲刷新操作可以保证到目前为止程序所产生的所有输出都真正写入输出流中，
     * 而不是仅停留在 内存中等待写入流。
     * 
     * 2. 从流读取数据
     * 定义 int 变量 v1 v2 并初始化为0。
     * 
     * >> 输入运算符
     * 接受一个istream作为其左侧运算对象，接受一个对象作为其右侧运算对象。
     * 它从给定的istream读入数据，并存入给定对象中。
     * 输入运算符返回其左侧运算对象作为其计算结果。
     * 
     * 本例中的输入操作从 std：：cin 读入两个值，并将第一个值存入v1，将第二个值存入v2。 
     * 换句话说，它与下面两条语句的执行结果是一样的：
     * std:cin >> v1;
     * std::cin >> v2;
     * 
     * 3. 完成程序
     * 打印计算结果
     */
    std::cout << "Enter 2 numbers:" << std::endl;
    int v1 = 0, v2 = 0;
    std::cin >> v1 >> v2;
    std::cout << "The sum of " << v1 << " and " << v2
              << " is " << v1 + v2 << std::endl;
    
    return 0;
}