/*
 * @Author: Bssn520 Bssn520@duck.com
 * @Date: 2024-11-01 21:52:07
 * @LastEditTime: 2024-11-02 15:31:45
 * @Description: 顺序容器概述
 * 
 */

/*
1. 顺序容器概述

一个容器就是一些特定类型对象的集合。顺序容器 为程序员提供了控制元素存储和访问顺序的能力。这种顺序不依赖于元素的值，而是与元素加入容器时的位置相对应。

标准库中的顺序容器:
vector          可变大小数组。支持快速随机访问。在尾部之外的位置插入或删除元素可能很慢

deque           双端队列。支持快速随机访问。在头尾位置插入/删除速度很快

list            双向链表。只支持双向顺序访问。在1ist 中任何位置进行插入/删除操作速度都很快

forward_list    单向链表。只支持单向顺序访问。在链表任何位置进行插入/删除操作速度都很快

array           固定大小数组。支持快速随机访问。不能添加或删除元素

string          与 vector 相似的容器，但专门用于保存字符。随机访问快。在尾部插入/删除速度快

如何确定使用哪种顺序容器?

以下是一些选择容器的基本原  // 除非你有很好的理由选择其他容器，否则应使用 vector。 •如果你的程序有很多小的元素，且空间的额外开销很重要，则不要使用 list 或 forward_lis   // 如果程序要求随机访问元素，应使用 vector 或 dequ    // 如果程序要求在容器的中间插入或删除元素，应使用 1ist 或forward_1is   // 如果程序需要在头尾位置插入或删除元素，但不会在中间位置进行插入或删除操 作，则使用 dequ // 如果程序只有在读取输入时才需要在容器中间位置插入元素，随后需要随机访问元素，则:
        // 首先，确定是否真的需要在容器中间位置添加元素。当处理输入数据时，通常 可以很容易地向 vector 追加数据，然后再调用标准库的 sort 函数来重排容器中的元素，从而避免在中间位置添加元素。 
        // 如果必须在中间位置插入元素，考虑在输入阶段使用1ist，一旦输入完成，将 list 中的内容拷贝到一个 vector中。

注: 通常，使用 vector 是最好的选择。如果你不确定应该使用哪种容器，
那么可以在程序中只使用 vector 和 list 公共的操作：使用选代器，不使用下标操作，避免随机访问。

ex 9.1：
对于下面的程序任务，vector、deque 和 1ist 哪种容器最为适合？解释你的选择的理由。如果没有哪一种容器优于其他容器，也请解释理由。 
(a)读取固定数量的单词，将它们按字典序插入到容器中。我们将在下一章中看到，关联容器更适合这个问题。 
(b)读取未知数量的单词，总是将新单词插入到末尾。删除操作在头部进行。 
(c)从一个文件读取未知数量的整数。将这些数排序，然后将它们打印到标准输出。
答: 
(a): 需要在中间插入数据，选择 list
(b): 需要在头尾插入或删除数据，选择 deque
(c): 没有特殊需求，选择 vector

*/